package business;

import javafx.fxml.FXML;

import javafx.scene.control.Button;
import javafx.scene.Node;
import javafx.application.Platform;
import LogicStructures.LogicQueue;
import LogicStructures.LogicVerticesList;
import Nodes.NodeVertex;
import java.util.Random;
import Structures.Graph;
import Structures.RoadList;
import Structures.VerticesList;
import domain.Car;
import domain.GraphRoad;
import domain.Incident;
import domain.RoadLister;
import domain.RoadsGrid;
import javafx.event.ActionEvent;

import javafx.scene.control.Spinner;
import javafx.scene.control.SpinnerValueFactory;
import javafx.scene.control.TableView;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;

public class MainController {
	@FXML
	private Pane pGrid;
	@FXML
	private Pane pData;
	@FXML
	private Spinner<Integer> sSize;
	@FXML
	private TableView<Incident> tVIncidents;
	@FXML
	private TableView<RoadList> tVCongestedRoads;
	@FXML
	private Button bEvent;
	@FXML
	private Button bGenerateCar;
	@FXML
	private Button bShowGraph;
	@FXML
	private Button bRoads;

	private GridPane grid;

	@FXML
	private void initialize() {
		/*
		 * EstablecerÃ© un limite de 5 por un tema de espacio en la ventana
		 */
		sSize.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(3, 5, 3));
		sSize.valueProperty().addListener((o, v, n) -> draw());
		draw();
	}

	private void draw() {
		int a = sSize.getValue();
		GridPane g = RoadsGrid.generateGrid(a);
		grid = g;

		g.prefWidthProperty().bind(pGrid.widthProperty());
		g.prefHeightProperty().bind(pGrid.heightProperty());
		g.maxWidthProperty().bind(pGrid.widthProperty());
		g.maxHeightProperty().bind(pGrid.heightProperty());

		pGrid.getChildren().setAll(g);
	}

	public void updateCarPosition(int prevRow, int prevCol, int row, int col) {
		if (grid == null) {
			return;
		}

		Node prevTarget = null;
		Node target = null;
		for (Node node : grid.getChildren()) {
			Integer r = GridPane.getRowIndex(node);
			if (r == null)
				r = 0;
			Integer c = GridPane.getColumnIndex(node);
			if (c == null)
				c = 0;
			if (prevRow >= 0 && prevCol >= 0 && r == prevRow && c == prevCol) {
				prevTarget = node;
			}
			if (r == row && c == col) {
				target = node;
			}
		}

		final Node pBtn = prevTarget;
		final Node btn = target;
		Platform.runLater(() -> {
			if (pBtn != null && pBtn instanceof Button) {
				((Button) pBtn).setStyle("");
			}
			if (btn != null && btn instanceof Button) {
				((Button) btn).setStyle("-fx-background-color: red;");
			}
		});
	}

	// Event Listener on Button[#bEvent].onAction
	@FXML
	public void toChooseEvent(ActionEvent event) {
		// TODO Autogenerated
	}

	// Event Listener on Button[#bGenerateCar].onAction
	@FXML
	public void toAddCar(ActionEvent event) {
		Graph graph = GraphRoad.getGraph();
		if (graph == null || graph.getVertices() == null)
			return;

		VerticesList vList = graph.getVertices();
		if (LogicVerticesList.isEmpty(vList))
			return;

		int size = LogicVerticesList.size(vList);

		Random r = new Random();
		int start;
		int end;
		do {
			start = r.nextInt(size);
			end = r.nextInt(size);
		} while (start == end);

		NodeVertex startV = vList.getFirst();
		for (int i = 0; i < start && startV != null; i++) {
			startV = startV.getNext();
		}

		NodeVertex endVertex = vList.getFirst();
		for (int i = 0; i < end && endVertex != null; i++) {
			endVertex = endVertex.getNext();
		}

		if (startV == null || endVertex == null)
			return;

		Car car = new Car(startV.getNodeV(), endVertex.getNodeV(), this);

		LogicQueue.add(car, startV.getNodeV().getCars());

		Thread carThread = new Thread(car);
		carThread.setDaemon(true);
		carThread.start();
	}

	// Event Listener on Button[#bShowGraph].onAction
	@FXML
	public void toShowGraphInfoInConsole(ActionEvent event) {
		GraphRoad.displayGraph();

	}

	// Event Listener on Button[#bRoads].onAction
	@FXML
	public void toShowRoads(ActionEvent event) {
		Graph graph = GraphRoad.getGraph();
		RoadLister.print(graph);
	}
}