package business;

import javafx.fxml.FXML;

import javafx.scene.control.Button;
import Structures.Graph;
import Structures.RoadList;
import Structures.VerticesList;
import Nodes.NodeVertex;
import Nodes.NodeV;
import LogicStructures.LogicQueue;
import LogicStructures.LogicVerticesList;
import domain.Car;
import domain.GraphRoad;
import domain.Incident;
import domain.RoadLister;
import domain.RoadsGrid;
import javafx.event.ActionEvent;

import javafx.scene.control.Spinner;
import javafx.scene.control.SpinnerValueFactory;
import javafx.scene.control.TableView;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;

public class MainController {
	@FXML
	private Pane pGrid;
	@FXML
	private Pane pData;
	@FXML
	private Spinner<Integer> sSize;
	@FXML
	private TableView<Incident> tVIncidents;
	@FXML
	private TableView<RoadList> tVCongestedRoads;
	@FXML
	private Button bEvent;
	@FXML
	private Button bGenerateCar;
	@FXML
	private Button bShowGraph;
	@FXML
	private Button bRoads;

	private GridPane grid;

	@FXML
	private void initialize() {
		/*
		 * EstablecerÃ© un limite de 5 por un tema de espacio en la ventana
		 */
		sSize.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(3, 5, 3));
		sSize.valueProperty().addListener((o, v, n) -> draw());
		draw();
	}

	private void draw() {
		int a = sSize.getValue();
		GridPane g = RoadsGrid.generateGrid(a);
		grid = g;

		g.prefWidthProperty().bind(pGrid.widthProperty());
		g.prefHeightProperty().bind(pGrid.heightProperty());
		g.maxWidthProperty().bind(pGrid.widthProperty());
		g.maxHeightProperty().bind(pGrid.heightProperty());

		pGrid.getChildren().setAll(g);
	}

	// Event Listener on Button[#bEvent].onAction
	@FXML
	public void toChooseEvent(ActionEvent event) {
		// TODO Autogenerated
	}

        // Event Listener on Button[#bGenerateCar].onAction
        @FXML
        public void toAddCar(ActionEvent event) {
                Graph graph = GraphRoad.getGraph();
                if (graph == null || graph.getVertices() == null)
                        return;

                VerticesList vList = graph.getVertices();
                if (LogicVerticesList.isEmpty(vList))
                        return;

                NodeVertex startVertex = vList.getFirst();
                NodeVertex endVertex = vList.getLast();

                if (startVertex == null || endVertex == null)
                        return;

                Car car = new Car(startVertex.getNodeV(), endVertex.getNodeV());

                LogicQueue.add(car, startVertex.getNodeV().getCars());

                new Thread(car).start();
        }

	// Event Listener on Button[#bShowGraph].onAction
	@FXML
	public void toShowGraphInfoInConsole(ActionEvent event) {
		GraphRoad.displayGraph();

	}// Event Listener on Button[#bRoads].onAction

	@FXML
	public void toShowRoads(ActionEvent event) {
		Graph graph = GraphRoad.getGraph();
		RoadLister.print(graph);
	}
}
